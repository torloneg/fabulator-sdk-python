# coding: utf-8

"""
    Fabulator API

    Endpoint Fabulator project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: torloneg@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExampleApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_example_v1_iddomain_id(self, iddomain, id, **kwargs):  # noqa: E501
        """delete_example_v1_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_example_v1_iddomain_id(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_example_v1_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_example_v1_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
            return data

    def delete_example_v1_iddomain_id_with_http_info(self, iddomain, id, **kwargs):  # noqa: E501
        """delete_example_v1_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_example_v1_iddomain_id_with_http_info(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_example_v1_iddomain_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `delete_example_v1_iddomain_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_example_v1_iddomain_id`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `delete_example_v1_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `delete_example_v1_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/{iddomain}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_example_v1_info_iddomain_id(self, iddomain, id, **kwargs):  # noqa: E501
        """get_example_v1_info_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_example_v1_info_iddomain_id(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_example_v1_info_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_example_v1_info_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
            return data

    def get_example_v1_info_iddomain_id_with_http_info(self, iddomain, id, **kwargs):  # noqa: E501
        """get_example_v1_info_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_example_v1_info_iddomain_id_with_http_info(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_example_v1_info_iddomain_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `get_example_v1_info_iddomain_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_example_v1_info_iddomain_id`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `get_example_v1_info_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_example_v1_info_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/info/{iddomain}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_example_v1_update_iddomain_id_field_value(self, iddomain, id, field, value, **kwargs):  # noqa: E501
        """patch_example_v1_update_iddomain_id_field_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_example_v1_update_iddomain_id_field_value(iddomain, id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :param str field: (required)
        :param str value: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_example_v1_update_iddomain_id_field_value_with_http_info(iddomain, id, field, value, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_example_v1_update_iddomain_id_field_value_with_http_info(iddomain, id, field, value, **kwargs)  # noqa: E501
            return data

    def patch_example_v1_update_iddomain_id_field_value_with_http_info(self, iddomain, id, field, value, **kwargs):  # noqa: E501
        """patch_example_v1_update_iddomain_id_field_value  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_example_v1_update_iddomain_id_field_value_with_http_info(iddomain, id, field, value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :param str field: (required)
        :param str value: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'id', 'field', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_example_v1_update_iddomain_id_field_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `patch_example_v1_update_iddomain_id_field_value`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `patch_example_v1_update_iddomain_id_field_value`")  # noqa: E501
        # verify the required parameter 'field' is set
        if ('field' not in params or
                params['field'] is None):
            raise ValueError("Missing the required parameter `field` when calling `patch_example_v1_update_iddomain_id_field_value`")  # noqa: E501
        # verify the required parameter 'value' is set
        if ('value' not in params or
                params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `patch_example_v1_update_iddomain_id_field_value`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `patch_example_v1_update_iddomain_id_field_value`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `patch_example_v1_update_iddomain_id_field_value`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'field' in params:
            path_params['field'] = params['field']  # noqa: E501
        if 'value' in params:
            path_params['value'] = params['value']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/update/{iddomain}/{id}/{field}/{value}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_example_v1_add_iddomain(self, iddomain, **kwargs):  # noqa: E501
        """post_example_v1_add_iddomain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_example_v1_add_iddomain(iddomain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param Model4 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_example_v1_add_iddomain_with_http_info(iddomain, **kwargs)  # noqa: E501
        else:
            (data) = self.post_example_v1_add_iddomain_with_http_info(iddomain, **kwargs)  # noqa: E501
            return data

    def post_example_v1_add_iddomain_with_http_info(self, iddomain, **kwargs):  # noqa: E501
        """post_example_v1_add_iddomain  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_example_v1_add_iddomain_with_http_info(iddomain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param Model4 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_example_v1_add_iddomain" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `post_example_v1_add_iddomain`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `post_example_v1_add_iddomain`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/add/{iddomain}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_example_v1_query_iddomain_skip_limit(self, iddomain, skip, limit, **kwargs):  # noqa: E501
        """post_example_v1_query_iddomain_skip_limit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_example_v1_query_iddomain_skip_limit(iddomain, skip, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param float skip: (required)
        :param float limit: (required)
        :param Model9 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_example_v1_query_iddomain_skip_limit_with_http_info(iddomain, skip, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.post_example_v1_query_iddomain_skip_limit_with_http_info(iddomain, skip, limit, **kwargs)  # noqa: E501
            return data

    def post_example_v1_query_iddomain_skip_limit_with_http_info(self, iddomain, skip, limit, **kwargs):  # noqa: E501
        """post_example_v1_query_iddomain_skip_limit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_example_v1_query_iddomain_skip_limit_with_http_info(iddomain, skip, limit, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param float skip: (required)
        :param float limit: (required)
        :param Model9 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'skip', 'limit', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_example_v1_query_iddomain_skip_limit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `post_example_v1_query_iddomain_skip_limit`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `post_example_v1_query_iddomain_skip_limit`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `post_example_v1_query_iddomain_skip_limit`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `post_example_v1_query_iddomain_skip_limit`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'skip' in params:
            path_params['skip'] = params['skip']  # noqa: E501
        if 'limit' in params:
            path_params['limit'] = params['limit']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/query/{iddomain}/{skip}/{limit}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_example_v1_update_iddomain_id(self, iddomain, id, **kwargs):  # noqa: E501
        """put_example_v1_update_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_example_v1_update_iddomain_id(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_example_v1_update_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_example_v1_update_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
            return data

    def put_example_v1_update_iddomain_id_with_http_info(self, iddomain, id, **kwargs):  # noqa: E501
        """put_example_v1_update_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_example_v1_update_iddomain_id_with_http_info(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_example_v1_update_iddomain_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `put_example_v1_update_iddomain_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_example_v1_update_iddomain_id`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `put_example_v1_update_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `put_example_v1_update_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/update/{iddomain}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_example_v1_update_json_iddomain_id(self, iddomain, id, **kwargs):  # noqa: E501
        """put_example_v1_update_json_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_example_v1_update_json_iddomain_id(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :param Model14 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_example_v1_update_json_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_example_v1_update_json_iddomain_id_with_http_info(iddomain, id, **kwargs)  # noqa: E501
            return data

    def put_example_v1_update_json_iddomain_id_with_http_info(self, iddomain, id, **kwargs):  # noqa: E501
        """put_example_v1_update_json_iddomain_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_example_v1_update_json_iddomain_id_with_http_info(iddomain, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str iddomain: (required)
        :param str id: (required)
        :param Model14 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['iddomain', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_example_v1_update_json_iddomain_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'iddomain' is set
        if ('iddomain' not in params or
                params['iddomain'] is None):
            raise ValueError("Missing the required parameter `iddomain` when calling `put_example_v1_update_json_iddomain_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_example_v1_update_json_iddomain_id`")  # noqa: E501

        if 'iddomain' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['iddomain']):  # noqa: E501
            raise ValueError("Invalid value for parameter `iddomain` when calling `put_example_v1_update_json_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `put_example_v1_update_json_iddomain_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'iddomain' in params:
            path_params['iddomain'] = params['iddomain']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/example/v1/update_json/{iddomain}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
