# coding: utf-8

"""
    Fabulator API

    Endpoint Fabulator project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: torloneg@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SentenceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_sentence_v1_idrule_id(self, idrule, id, **kwargs):  # noqa: E501
        """delete_sentence_v1_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sentence_v1_idrule_id(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sentence_v1_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sentence_v1_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
            return data

    def delete_sentence_v1_idrule_id_with_http_info(self, idrule, id, **kwargs):  # noqa: E501
        """delete_sentence_v1_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sentence_v1_idrule_id_with_http_info(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idrule', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sentence_v1_idrule_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idrule' is set
        if ('idrule' not in params or
                params['idrule'] is None):
            raise ValueError("Missing the required parameter `idrule` when calling `delete_sentence_v1_idrule_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_sentence_v1_idrule_id`")  # noqa: E501

        if 'idrule' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['idrule']):  # noqa: E501
            raise ValueError("Invalid value for parameter `idrule` when calling `delete_sentence_v1_idrule_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `delete_sentence_v1_idrule_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'idrule' in params:
            path_params['idrule'] = params['idrule']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sentence/v1/{idrule}/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sentence_v1_info_idrule_id(self, idrule, id, **kwargs):  # noqa: E501
        """get_sentence_v1_info_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sentence_v1_info_idrule_id(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sentence_v1_info_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sentence_v1_info_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
            return data

    def get_sentence_v1_info_idrule_id_with_http_info(self, idrule, id, **kwargs):  # noqa: E501
        """get_sentence_v1_info_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sentence_v1_info_idrule_id_with_http_info(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idrule', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sentence_v1_info_idrule_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idrule' is set
        if ('idrule' not in params or
                params['idrule'] is None):
            raise ValueError("Missing the required parameter `idrule` when calling `get_sentence_v1_info_idrule_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_sentence_v1_info_idrule_id`")  # noqa: E501

        if 'idrule' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['idrule']):  # noqa: E501
            raise ValueError("Invalid value for parameter `idrule` when calling `get_sentence_v1_info_idrule_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        if 'id' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['id']):  # noqa: E501
            raise ValueError("Invalid value for parameter `id` when calling `get_sentence_v1_info_idrule_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'idrule' in params:
            path_params['idrule'] = params['idrule']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sentence/v1/info/{idrule}/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_sentence_v1_add_idrule(self, idrule, **kwargs):  # noqa: E501
        """post_sentence_v1_add_idrule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sentence_v1_add_idrule(idrule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param Model7 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_sentence_v1_add_idrule_with_http_info(idrule, **kwargs)  # noqa: E501
        else:
            (data) = self.post_sentence_v1_add_idrule_with_http_info(idrule, **kwargs)  # noqa: E501
            return data

    def post_sentence_v1_add_idrule_with_http_info(self, idrule, **kwargs):  # noqa: E501
        """post_sentence_v1_add_idrule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_sentence_v1_add_idrule_with_http_info(idrule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param Model7 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idrule', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_sentence_v1_add_idrule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idrule' is set
        if ('idrule' not in params or
                params['idrule'] is None):
            raise ValueError("Missing the required parameter `idrule` when calling `post_sentence_v1_add_idrule`")  # noqa: E501

        if 'idrule' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['idrule']):  # noqa: E501
            raise ValueError("Invalid value for parameter `idrule` when calling `post_sentence_v1_add_idrule`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'idrule' in params:
            path_params['idrule'] = params['idrule']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sentence/v1/add/{idrule}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_sentence_v1_update_idrule_id(self, idrule, id, **kwargs):  # noqa: E501
        """put_sentence_v1_update_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sentence_v1_update_idrule_id(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :param Model15 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_sentence_v1_update_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_sentence_v1_update_idrule_id_with_http_info(idrule, id, **kwargs)  # noqa: E501
            return data

    def put_sentence_v1_update_idrule_id_with_http_info(self, idrule, id, **kwargs):  # noqa: E501
        """put_sentence_v1_update_idrule_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_sentence_v1_update_idrule_id_with_http_info(idrule, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str idrule: (required)
        :param str id: (required)
        :param Model15 body:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['idrule', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_sentence_v1_update_idrule_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'idrule' is set
        if ('idrule' not in params or
                params['idrule'] is None):
            raise ValueError("Missing the required parameter `idrule` when calling `put_sentence_v1_update_idrule_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_sentence_v1_update_idrule_id`")  # noqa: E501

        if 'idrule' in params and not re.search(r'^[0-9a-fA-F]{24}$', params['idrule']):  # noqa: E501
            raise ValueError("Invalid value for parameter `idrule` when calling `put_sentence_v1_update_idrule_id`, must conform to the pattern `/^[0-9a-fA-F]{24}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'idrule' in params:
            path_params['idrule'] = params['idrule']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sentence/v1/update/{idrule}/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
