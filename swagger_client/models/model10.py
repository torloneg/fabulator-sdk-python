# coding: utf-8

"""
    Fabulator API

    Endpoint Fabulator project  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: torloneg@gmail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Model10(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'str',
        'dir': 'float'
    }

    attribute_map = {
        'field': 'field',
        'dir': 'dir'
    }

    def __init__(self, field='tag', dir=None):  # noqa: E501
        """Model10 - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._dir = None
        self.discriminator = None

        self.field = field
        self.dir = dir

    @property
    def field(self):
        """Gets the field of this Model10.  # noqa: E501


        :return: The field of this Model10.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this Model10.


        :param field: The field of this Model10.  # noqa: E501
        :type: str
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field

    @property
    def dir(self):
        """Gets the dir of this Model10.  # noqa: E501


        :return: The dir of this Model10.  # noqa: E501
        :rtype: float
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this Model10.


        :param dir: The dir of this Model10.  # noqa: E501
        :type: float
        """
        if dir is None:
            raise ValueError("Invalid value for `dir`, must not be `None`")  # noqa: E501

        self._dir = dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Model10, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Model10):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
